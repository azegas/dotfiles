#+TITLE: Emacs configuration file
#+AUTHOR: Arvydas Gasparavicius
#+date: [2021-06-15 Tue 22:22]
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Quick launch

#+begin_src bash :tangle no
  cd ~/
  rm -rf .emacs.d
  mkdir ~/GIT
  cd ~/GIT
  git clone git@github.com:azegas/dotfiles.git
  sudo ln -s ~/GIT/dotfiles/.emacs.d/ ~/.emacs.d
  # launch Emacs, let it download all the packages, etc
  # turn off emacs, do this in the terminal, we don't want to commit init.el (explanation in the comments section)
  git update-index --assume-unchanged init.el
#+end_src

* Comments
** Why I am using emacs

- I take notes in it
- I write code in it
- I plan time in it
- I run terminal in it
- I write and publish my blog with it
- I can write journal in it
- I basically live in it when I am at the computer
- I like improving my tools and workflow, emacs allows that
- Emacs is the most flexible and configurable editor I know

** Emacs usage/config history

I put this at the end, since this info is not really crucial for the configuration.

*** [2024-05-27 Mon] Cam back to Emacs

I have been working with VsCode at work and at home for the last 3-4 months. It
seemed too much time consuming to keep my notes up to date on all
environments(wanted to have something as easy as onedrive for my notes. One
place, can open everywhere, even at work).

Also wanted to have my work's environment to be the same as my colleagues, so
we could launch and debug things easier.

------

Been writing some docs today at home, in vscode, in markdown.. and realized
that man.. this is just sooo painful. Also saw Torstein's webpage, saw blog
posts about emacs.. and then realized that I regred switching to VSCode. It is
just so much more pleasing to be in Emacs and it is kind of my thing...

About notes - they did not seem like a factor because of which I would not use
emacs again. At work I would barely open my dev notes and when I do - does not
matter in what matter they are written, they are helpful. So if it's in org - it's in org.

At work I might continue using VSCode, just because everyone there does it and
it's a bit tricky to setup emacs there to run on nixos(did it once, can do it
again).

*** [2023-12-05 Tue] Back to one single init.org file for configuration

While driving from work I listened to [[https://github.com/freetonik/emacscast.org][emacascast]] podcast (episode 2)and
realized how great the [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]] is and how well it suites the emacs
config file. Today I switched back to using one .org file with all the
configurations instead of many small .el files.

*** [2023-11-28 Tue] Emacs for note taking

Decided to use emacs for note taking primarily. I rarely come to emacs
to write code. All these AI tools and so on.. Staying in other editors
instead. And if I come to emacs to code, I spend quite a while editing
the setup and yeah..

So, this emacs configuration is aimed to creating a "second brain",
for note keeping/taking/searching etc.

For that the code package is Denote. [[https://github.com/arvydasg/.emacs.d/commit/efb3b0f28b64a2dee7cca703ff301ea56f55921f][efb3b0f]] commit is the essential
one, where most modifications have happened.

Notes from that commint that summarize this chapter:
- consult package is amazing
- super nice to write notes with denote. Like the structure
- cleared up some clutter from the emacs config, replaced/removed lots
  of packages
- vertico + orderless for nice search mechanism
- project.el instead of projectile
- New theme

*** [2023-06-05 Mon] Lots of refactoring

New laptop, new setup ONCE Again. This time on Windows and WSL.

Have a lof of directories that have to be changed all the time I
switch machines, so decided to put all of those directories in one
place so it's easy to configure.

*** [2023-03-18 Sat] One org mode file for all configuration

Branch copied from "230318-Org-file-in-project-folder".

Decided to make .org file to act as my init file. Better for
documenting processes and storing shortcuts.. now I have three places
for that. One for init(config), one for shortcuts one for
documentation of emacs processes.

In the future it might be problem with windows stuff, but will see
then.

*** [2023-01-08 Sun] No init.org.
With it the config loads slower and it's not as easy to turn off
packages quickly. With my setup, I just uncomment the code and the
package is ignrod upon next load.

In case I want to load org file as my init.el, I can do it by placing
init.org file in my .emacs.d

#+begin_src bash :tangle no
  (package-initialize)
  (org-babel-load-file "~/.emacs.d/config.org")
#+end_src

*** [2023-01-06 Fri] Daemon mode

Found out about emacs daemon mode. It makes emacs
instances load instantaneously. Amazing.

Add these to .bashrc for easy launch/use/kill:

#+begin_src bash :tangle no
  alias ed='emacs --daemon'
  alias e='emacsclient -c -n'
  alias ek='emacsclient -e "(kill-emacs)"'
#+end_src

*** [2023-01-06 Fri] Using emacs with org mode at work

[[https://www.reddit.com/r/emacs/comments/1043g41/help_me_use_emacs_with_org_mode_at_work/][Using emacs with org mode at work]].
Finally decided to have work org files at work and personal at home.
Better work and life balance in this way. Emacs at work windows
computer will run on WSL with [[https://opticos.github.io/gwsl/][GWSL]] for a GUI.

*** [2022-12-27 Tue] Overwhelmed

I am feeling little bit overwhelmed with my workflow
with emacs to track my daily tasks and projects at home and at work.

All was fine until I discovered that I can use emacs at work(finally).
Now the struggle is with Dropbox, keeping only my work files at work,
but also seeing them at home..

Then also the agenda views, capture templates, refiling, one big org
file or many small org files, tags, categories, archiving and so on.
The more I tinker with it the more lost and confused I become.

Each time configuring the method requires me restructuring the
notes...

This is the attempt where I try to implement this:

https://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html

https://members.optusnet.com.au/~charles57/GTD/remember.html

https://members.optusnet.com.au/~charles57/GTD/mydotemacs.txt

https://lifehacker.com/the-weekly-review-how-one-hour-can-save-you-a-week-s-w-5908816

Wish me luck.

I will simplify it as much as possible, then use it with ease and
enjoyment. I know it.

** Great Emacs config's of others

- First and only Lithuanian(after myself) I see using Emacs https://github.com/Giedriusj1
- https://github.com/magnars/emacsd-reboot/tree/main (emacs rocks, parens of the dead author)
- https://github.com/search?q=language%3Aelisp%20init.el
- https://github.com/gopar/.emacs.d
- https://github.com/zamansky/using-emacs/blob/master/myinit.org
- https://github.com/rememberYou/.emacs.d/blob/master/config.org#javascript
- http://doc.norang.ca/org-mode.html#TaskEstimates
- https://alphaalgorithms.github.io/2019/05/17/emacs-agenda-views/
- https://staff.fnwi.uva.nl/p.vanormondt/blog/2021-02-13-emacs-init-file.html
- https://github.com/sbroberg/.emacs.d
- https://github.com/thierryvolpiatto/emacs-config/blob/main/init.el
- https://gitlab.com/skybert/my-little-friends/-/blob/master/emacs/.emacs#L1100
- https://github.com/tabfugnic/dotfiles/blob/main/emacs.d/config.org
- https://sachachua.com/dotemacs/index.html#org604b1d4
- https://github.com/magnars/.emacs.d
- https://github.com/zaeph/.emacs.d
- https://whhone.com/emacs-config/#general
- https://sqrtminusone.xyz/configs/emacs/
- https://github.com/novoid/dot-emacs/blob/master/config.org
- https://github.com/Crandel/home/tree/master/.config/emacs
- https://github.com/Likhon-baRoy/.emacs.d
- https://github.com/jakebox/jake-emacs
- https://github.com/terlar/emacs-config
- https://github.com/larstvei/dot-emacs
- https://github.com/freetonik/emacs-dotfiles (https://emacscast.org/)
- https://github.com/drewcsillag/emacsconfig/blob/master/emacs-config.org
  (creator of dockerfile-mode)

** How to use this config

This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt to
keep my =~/.emacs.d= tidy, but still be able to keep it all in one file. I
aim to briefly explain all my configurations as I go along!

I would not recommend using this configuration /as-is/, because it probably
contains a lot you don't really need. I do, however, hope people find some
golden nuggets that they can smuggle into their own configs.

If you really do want to try this config out, this is how I'd go about it:

Backup your old =~/.emacs.d= (if necessary).

#+begin_src sh :tangle no
  mv ~/.emacs.d ~/.emacs.d-bak
#+end_src

Backup your old =~/.emacs=-file (if necessary).

#+begin_src sh :tangle no
  mv ~/.emacs ~/.emacs-bak
#+end_src

Clone the repo.

#+begin_src sh :tangle no
  git clone https://github.com/arvydasg/.emacs.d
#+end_src

On first run it should install a bunch of packages (this might take a while),
and you might have to restart your Emacs the first time. If you experience
bugs, please let me know!

** Minimal config

If for any reason you might want to start the emacs config with minimal
settings, there is =test-config.el= in the current directory as well.

We can use it to start another(or new) emacs session by running such command in
the terminal while in =.emacs.d= directory.

#+begin_src bash :tangle no
  emacs -q -l test-config.el
#+end_src

* Tangling

#+begin_src emacs-lisp
  (message "Tangling")
#+end_src

** What is tangling, literate programming, org-babel

All changes to the configuration should be done in =init.org=, *not* in
=init.el=. Any changes in the =init.el= will be OVERWRITTEN(due to the script
below) by saving =init.org=. The =init.el= in this repo should not be tracked
by git, and is replaced the first time Emacs is started (assuming it has been
renamed to =~/.emacs.d=).

Emacs can't load =.org=-files directly, but =org-mode= provides functions to
EXTRACT the code blocks(begin_src) and write them to a file. There are multiple
ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]].

When this configuration is loaded for the first time, the ~init.el~ is the
file that is loaded. It looks like this:

#+begin_src emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  (require 'org-babel)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
#+end_src

It tangles the org-file, so that this file is overwritten with the actual
configuration.

We set :tangle yes to all the source blocks(at the very top of .org file), so
all source blocks get tangled by default.
#+begin_src emacs-lisp :tangle no
  #+BABEL: :cache yes
  #+PROPERTY: header-args :tangle yes
  #+STARTUP: overview
#+end_src

There is no reason to track the =init.el= that is generated; by running the
following command =git= will not bother tracking it:

#+begin_src bash :tangle no
  git update-index --assume-unchanged init.el
#+end_src

If one wishes to make changes to the repo-version of init.el start tracking again with:

#+begin_src bash :tangle no
  git update-index --no-assume-unchanged init.el
#+end_src

** Lexical binding, garbage collection

Lexical scoping for the init-file is needed, it can be specified in the header.
Make startup faster by reducing the frequency of garbage collection. The
default is 800 kilobytes. Measured in bytes. These are the first lines of the
actual configuration.

A common optimization is to temporarily disable garbage collection during
initialization. Here, we set the ~gc-cons-threshold~ to a ridiculously large
number, and restore the default value after initialization.

Enabling lexical scoping with lexical-binding: t in your Emacs init-file can
provide advantages such as better encapsulation, avoiding accidental variable
modifications, and clearer code behavior by ensuring that variables are scoped
as intended.

#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Automatically tangle init.org and recompile the init.el file

The =init.el= should (after the first run) mirror the source blocks in the
=init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which extracts
the code blocks from the current file into a source-specific file (in this
case a =.el=-file).

To avoid doing this each time a change is made we can add a function
to the =after-save-hook= ensuring to always tangle and byte-compile
the =org=-document after changes. Open *Compile-Log* buffer to see
if your compilation has been successfull. Great for tracking if you
have broke something with your configuration.

Absolute path to emacs dir
#+begin_src emacs-lisp
  (setq ag/emacs-dir "~/.emacs.d")
#+end_src

#+begin_src emacs-lisp
  (defun tangle-init ()
    "If the current buffer is init.org, the code blocks are tangled,
       and the tangled file is compiled."
    (when (equal (file-name-nondirectory (buffer-file-name))
                 "init.org")
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

** Turn off errors at the beginning of emacs launch? Native compilation.

Due to emacs 29 and probably because of this tangling thing, with each Emacs
launch I used to suffer seeing lots of warning messages. Emacs worked just
fine, but all these warnings each time.. Was watching this video -
https://www.youtube.com/live/9zwNH2Orw8s?si=4XK5e1pC_DsCisHg&t=2351 at 39:10 and saw a
fix below. Now it's in my config also.

#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+end_src

* COMMENT refresh contents

When you launch emacs for the FIRST TIME on the new machine, uncomment this heading. When all the packages have been installed, comment it out.

#+begin_src emacs-lisp
  (package-refresh-contents)
#+end_src

* Secret file
A file that is not commited to git, different for each environment.

File template currently:

#+begin_src emacs-lisp
  (load-file (concat ag/emacs-dir "/secret.el"))
#+end_src

* Startup performance

#+begin_src emacs-lisp
  (message "Startup performance")
#+end_src

** Main ideas

#+begin_quote :tangle no
"My" tricks for <1s startup time (GUI Emacs on ~5 year old laptop):
#+end_quote

From here - https://www.reddit.com/r/emacs/comments/lkfuk5/how_to_cut_emacs_start_up_time_in_half_emacs_from/

- Defer most packages using use-package (most important)
- increase gc-cons-threshold during startup
- use early-init.el to set graphical parameters and fonts
- make sure scratch starts in fundamental-mode
- avoid set-face-attributes
- avoid load-theme
- avoid require during startup
- don't use :init in use-package
- use esup to find things that slow down startup
- use package-quickstart
- unset file-name-handler-alist during startup

** Garbage collection + welcome message

Make startup faster by reducing the frequency of garbage collection and then
use a hook to measure Emacs startup time.

#+begin_src emacs-lisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
      (lambda ()
        (message "*** Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
             (float-time
        (time-subtract after-init-time before-init-time)))
           gcs-done)))
#+end_src

To check what made emacs load so long and identify the bottle necks, we cna use
function and set it to t. After each emacs launch we can then do =M-x
use-package-report= to check the report.

#+begin_src emacs-lisp
  (setq use-package-compute-statistics t)
#+end_src

** Monitor init time with esup

# Placed this package in packages section instead of "startup
# performance", since this block needs to install a package and for that
# we have to have use package initiated first.

It might not work at first as described here -
https://www.reddit.com/r/emacs/comments/13jh7gk/has_anyone_been_able_to_get_esup_working_in_emacs/

But if you set ~esup-depth~ to 0, it will work :))

1. install this package by hand by replacing :disabled with :ensure
2. Make the package disabled again
3. eval ~(setq esup-depth 0)~
4. run ~esup~ when needed

#+begin_src emacs-lisp
  (use-package esup
    ;; :ensure t
    :disabled t
    :custom
    (esup-depth 0))
  (setq esup-depth 0)
#+end_src

This is how it looked the first time I ran it. Already had deferred all the
packages.

#+begin_src txt :tangle no
  Total User Startup Time: 2.755sec     Total Number of GC Pauses: 1     Total GC Time: 0.042sec

  init.el:796  1.488sec   54%
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  init.el:32  0.516sec   18%
  (package-initialize)

  init.el:315  0.433sec   15%
  (require 'ox-publish)

  init.el:786  0.132sec   4%
  (require 'eglot)

  init.el:807  0.061sec   2%
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

* Installation of packages

#+begin_src emacs-lisp
  (message "Installation of packages")
#+end_src

John Wiegley's extremely popular [[https://github.com/jwiegley/use-package][use-package]] was included in [[https://lists.gnu.org/archive/html/emacs-devel/2022-12/msg00261.html][Emacs 29]]. It
provides a powerful macro for isolating package configuration.

Install use-package if it's not already installed.
#+begin_src emacs-lisp
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  #+end_src

#+begin_src emacs-lisp
  (require 'use-package)
  ;; always add :ensure t to each package. I like to better add the :ensure t myself
  ;; (setq use-package-always-ensure t)
#+end_src

Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest archive
and is well maintained.

#+begin_src emacs-lisp
  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
          ("MELPA Stable" . "https://stable.melpa.org/packages/")
          ("MELPA"        . "https://melpa.org/packages/"))
        package-archive-priorities
        '(("GNU ELPA"     . 10)
          ("MELPA"        . 5)
          ("MELPA Stable" . 0)))
#+end_src

* General tweaks

#+begin_src emacs-lisp
  (message "Genreal Tweaks")
#+end_src

** Jump to my main config file.

Putting this at the top of the config to guarantee
that I will always have this keybinding available if stuff breaks futher on in
the config.

#+begin_src emacs-lisp
  (defun ag/find-init.org nil
    (interactive)
    (find-file (concat ag/emacs-dir "/init.org")))
  (global-set-key (kbd "C-x <C-backspace>") 'ag/find-init.org)
#+end_src

** Jump to my NixOS configuration file

#+begin_src emacs-lisp
  (defun ag/find-nix-configuration nil
    (interactive)
    (find-file "/etc/nixos/configuration.nix"))
  (global-set-key (kbd "C-x C-<home>") 'ag/find-nix-configuration)
#+end_src

** Set utf-8 as preferred coding system.

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
#+end_src

** unbind c-z

I am tired of clicking C-z by accident and freezing my pane.
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

** Set some default variables

We can set variables to whatever value we’d like using setq.

#+begin_src emacs-lisp
  (setq make-backup-files nil       ; Stop creating backup~ files
        auto-save-default nil             ; Stop creating #autosave# files
        inhibit-startup-screen t          ; No splash screen please
        initial-scratch-message nil       ; Clean scratch buffer
        kill-whole-line t                 ; C-k kills line including its newline
        ring-bell-function 'ignore        ; Quiet
        scroll-margin 1                   ; Space between cursor and top/bottom
        show-paren-delay 0
        sentence-end-double-space nil     ; No double space
        confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
        read-extended-command-predicate #'command-completion-default-include-p ; Hide M-x commands which does not work in the current buffer.
        )
#+end_src

** Set buffer-local variables?

Some variables are buffer-local, so changing them using setq will only change
them in a single buffer. Using setq-default we change the buffer-local
variable’s default value.

#+begin_src emacs-lisp
  (setq-default
   fill-column 79                   ;Maximum line width
   ;; auto-fill-function 'do-auto-fill ;Auto-fill-mode everywhere
   calendar-week-start-day 1        ;self explanatory
   )
#+end_src

** Spell checking with flyspell

“Flyspell enables on-the-fly spell checking in Emacs by the means of a minor
mode. It is called Flyspell. This facility is hardly intrusive. It requires no
help. Flyspell highlights incorrect words as soon as they are completed or as
soon as the TextCursor hits a new word.”

Docs - https://www.emacswiki.org/emacs/FlySpell. Make sure you have =ispell=
installed on your system.

Here is an example to enable it for text-mode, and disable it for log-edit-mode
and change-log-mode. These two are derived from text-mode, and thus enabling
flyspell-mode for text-mode also enables it for these two. An alternative
solution would be the writing of a flyspell-mode-predicate such that symbols
are ignored by flyspell.
#+begin_src emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src

** y-or-n-p

Answering yes and no to each question from Emacs can be tedious, a single y or
n will suffice.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Autosave stuff

To avoid file system clutter we put all auto saved files in a single directory.
( have not had a chance to use this, keeping anyway..)

#+begin_src emacs-lisp
  (defvar emacs-autosave-directory
    (concat user-emacs-directory "autosaves/")
    "This variable dictates where to put auto saves. It is set to a
    directory called autosaves located wherever your .emacs.d/ is
    located.")

  ;; Sets all files to be backed up and auto saved in a single directory.
  (setq backup-directory-alist
        `((".*" . ,emacs-autosave-directory))
        auto-save-file-name-transforms
        `((".*" ,emacs-autosave-directory t)))
#+end_src

** Clean up all the whitespace in the buffer on buffer save

Sounds nice, but VERY dangerous if you open a file that has never been opened
in emacs and this whitespace-cleanup is ran - the whole file will get changed.
Probably better to turn off when working in a team with someone else.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

** Auto fill fix

Auto Fill mode breaks lines automatically at the appropriate places whenever
lines get longer than the desired width. [2023-12-21 Thu] turning this feature
off for a sec. Not good when you have long command line and emacs automatically
wraps it
#+begin_src emacs-lisp :tangle no
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

** Unfill region

[2022-04-05 Tue] Un-fill region. Used it when putting text content to a website
and emacs text wrapping at 79 or 80 characters is not appropriate.

#+begin_src emacs-lisp
  (defun ag/unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
      logical line.  This is useful, e.g., for use with
      `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

  (define-key global-map "\C-\M-Q" 'ag/unfill-region)
#+end_src

** Duplicate current line or region

#+begin_src emacs-lisp
  (defun duplicate-current-line-or-region (arg)
    "Duplicates the current line or region ARG times.
  If there's no region, the current line will be duplicated. However, if
  there's a region, all lines that region covers will be duplicated."
    (interactive "p")
    (let (beg end (origin (point)))
      (if (and mark-active (> (point) (mark)))
          (exchange-point-and-mark))
      (setq beg (line-beginning-position))
      (if mark-active
          (exchange-point-and-mark))
      (setq end (line-end-position))
      (let ((region (buffer-substring-no-properties beg end)))
        (dotimes (_ arg)
          (goto-char end)
          (newline)
          (insert region)
          (setq end (point)))
        (goto-char (+ origin (* (length region) arg) arg)))))

  (global-set-key (kbd "M-c") 'duplicate-current-line-or-region)
#+end_src

* Customize-group

Run =M-x customize-group RET package-name RET= to see or set the possible
variables of particular package.

* Create custom bindings map

Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]] I keep a =custom-bindings-map= that holds
all my custom bindings. This map can be activated by toggling a simple
=minor-mode= that does nothing more than activating the map. This inhibits
other =major-modes= to override these bindings.

Basically instead of using the default key-bindings that come with the
packages, I override the default keybindings globally.

M-x cusom-bindings-map to preview all the bindings in one place.

#+begin_src emacs-lisp
  (defvar ag/custom-bindings-map (make-keymap)
    "A keymap for custom bindings.")
#+end_src

* Packages

#+begin_src emacs-lisp
  (message "Packages")
#+end_src

** Visuals

#+begin_src emacs-lisp
  (message "Visuals")
#+end_src

*** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 130)
#+end_src

*** COMMENT Declutter

*** Theme

Make MISC folder as a place where emacs looks for additional custom themes

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path (concat ag/emacs-dir "/MISC/"))
#+end_src

This setting tells Emacs to consider all themes as safe and eliminates the
prompt for confirmation on whether to load and trust a theme with Lisp code.
With this configuration, Emacs will automatically trust and load themes without
asking for confirmation each time you start Emacs.
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
#+end_src

*** COMMENT Modus-theme

¨Highly accessible themes for GNU Emacs, conforming with the highest standard
for color contrast between background and foreground values (WCAG AAA)¨

#+begin_src emacs-lisp :tangle no
  (use-package modus-themes
    :ensure t
    :config
    (load-theme 'modus-vivendi-tinded))
#+end_src

*** Zenburn theme

#+begin_src emacs-lisp
  (load-theme 'zenburn)
  ;; (load-theme 'wombat)
#+end_src

*** COMMENT Smooth scrolling

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :ensure t)

  ;; Accelerate scrolling with the trade-off of sometimes delayed accurate fontification.
  (setq fast-but-imprecise-scrolling t)
#+end_src

*** COMMENT Frame

Add a small border on the frame.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(internal-border-width . 24))
#+end_src

*** COMMENT Dashboard

Dashboard provides a nice welcome. (takes too long to load.)

#+begin_src emacs-lisp
  ;; A startup screen extracted from Spacemacs
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-projects-backend 'project-el
    dashboard-banner-logo-title nil
    dashboard-center-content t
    dashboard-set-footer nil
    dashboard-page-separator "\n\n\n"
    dashboard-items '((projects . 15)
    (recents  . 15)
    (bookmarks . 5)
    (agenda . 5)))
    (dashboard-setup-startup-hook)
    ;; :bind (:map ag/custom-bindings-map
    ;;       ("C-v" . #'dashboard-open))
    )
#+end_src

*** Line numbers

Don't display them globally, only in prog-mode
#+begin_src emacs-lisp
  ;; (global-display-line-numbers-mode 1)
  ;; (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'yaml-mode-hook #'display-line-numbers-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

*** Cursor type

Use a bar cursor by default.
#+begin_src emacs-lisp
  ;; (setq-default cursor-type 'bar)
  (setq-default cursor-type 't)
#+end_src

*** Mode line

**** Custom mode line

Will create my own modeline following [[https://www.youtube.com/watch?v=Qf_DLPIA9Cs&ab_channel=ProtesilaosStavrou][this]] excellent Protesilaos Stravrou
guide.

***** How it works

First of all I have to mention that I will use =setq-default= instead of
=setq=. Setq-default does the change for ALL the buffers, setq - only for the
current buffer.

Can simply try it out by evaluating this piece of code when you have two
different windows open side by side:
#+begin_src emacs-lisp :tangle no
  (setq mode-line-format nil)
#+end_src

Run this command do revert the change in the current buffer/window:
#+begin_src emacs-lisp :tangle no
  (kill-local-variable 'mode-line-format)
#+end_src

now run this command when you have two buffer windows open, mode line will
dissapear in both:
#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format nil)
#+end_src

So here is my cusom mode line example:
#+begin_src emacs-lisp :tangle no
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (format "BUFFER: %s"
                           (propertize (buffer-name) 'face 'success)))
                  "   "
                  (:eval
                   (format "MODE: %s"
                           (propertize (symbol-name major-mode) 'face 'bold)))
                  ))
#+end_src

***** The actual custom modeline

Mainly copied from - https://github.com/terlar/emacs-config

Define a variable to conveniently access only the major mode part of
mode-line-modes.

#+begin_src emacs-lisp
  (defvar mode-line-major-mode
    `(:propertize ("" mode-name)
                  help-echo "Major mode\n\
  mouse-1: Display major mode menu\n\
  mouse-2: Show help for major mode\n\
  mouse-3: Toggle minor modes"
                  mouse-face mode-line-highlight
                  local-map ,mode-line-major-mode-keymap))
#+end_src

Define custom faces(colors). See all colors available with M-x list-colors-display.

#+begin_src emacs-lisp
  ;; Define a face for the filename part with a different color
  (defface mode-line-filename-face
    '((t (:foreground "gold2")))
    "Face for the filename part of the mode line.")
#+end_src

Configure the order and components of the mode line.

#+begin_src emacs-lisp
  (setq-default mode-line-format
                '("%e" mode-line-front-space
                  mode-line-misc-info
                  (vc-mode vc-mode)
                  "  "
                  mode-line-modified
                  mode-line-remote
                  "  "
                  (:eval (propertize (concat (abbreviate-file-name default-directory)(buffer-name))
                                     'face 'mode-line-filename-face))
                  ;; mode-line-buffer-identification ;only shows the filename
                  "  "
                  mode-line-position
                  (:eval
                   (mode-line-right))
                  mode-line-end-spaces))
#+end_src

Setup the right aligned mode line and helper functions to display it.

#+begin_src emacs-lisp
  (defvar mode-line-right-format nil
    "The mode line to display on the right side.")

  (defun mode-line-right ()
    "Render the `mode-line-right-format'."
    (let ((formatted-line (format-mode-line mode-line-right-format)))
      (list
       (propertize
        " "
        'display
        `(space :align-to (- right
                             (+ ,(string-width formatted-line) right-fringe right-margin))))
       formatted-line)))
#+end_src

Move default components to the right side of the mode line.

#+begin_src emacs-lisp
  (setq mode-line-right-format
        (list '(:eval mode-line-mule-info)
              "  "
              mode-line-major-mode))
#+end_src

Add position information including column and line number but skip the
percentage.

#+begin_src emacs-lisp
  (setq mode-line-position-column-line-format '(" L%l:C%C"))
  (setq mode-line-percent-position nil)
  (column-number-mode 1)
  (line-number-mode 1)
#+end_src

**** COMMENT powerline

#+begin_src emacs-lisp
  (use-package powerline)
  (powerline-default-theme)
#+end_src

**** COMMENT Doom-modeline

Doom theme modeline. Kind of minimalistic and clean. Many customization options
here -

=M-x nerd-icons-install-fonts= for icons to show properly in modeline - https://github.com/seagle0128/doom-modeline/issues/310#issuecomment-1587476297

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode 1))

  ;; If non-nil, cause imenu to see `doom-modeline' declarations.
  ;; This is done by adjusting `lisp-imenu-generic-expression' to
  ;; include support for finding `doom-modeline-def-*' forms.
  ;; Must be set before loading doom-modeline.
  ;; (setq doom-modeline-support-imenu t)

  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 25)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 8)

  ;; Whether to use hud(position in a file indicator) instead of default bar. It's only respected in GUI.
  (setq doom-modeline-hud t)

  ;; The limit of the window width.
  ;; If `window-width' is smaller than the limit, some information won't be
  ;; displayed. It can be an integer or a float number. `nil' means no limit."
  (setq doom-modeline-window-width-limit 85)

  ;; How to detect the project root.
  ;; nil means to use `default-directory'.
  ;; The project management packages have some issues on detecting project root.
  ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
  ;; to hanle sub-projects.
  ;; You can specify one if you encounter the issue.
  (setq doom-modeline-project-detection 'auto)

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   auto => emacs/l/comint.el (in a project) or comint.el
  ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project => emacs/l/comint.el
  ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
  ;;   truncate-all => ~/P/F/e/l/comint.el
  ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   relative-from-project => emacs/lisp/comint.el
  ;;   relative-to-project => lisp/comint.el
  ;;   file-name => comint.el
  ;;   buffer-name => comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are experiencing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  ;; (setq doom-modeline-buffer-file-name-style 'auto)
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon t)

  ;; Whether display the icon for `major-mode'. It respects option `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display the colorful icon for `major-mode'.
  ;; It respects `nerd-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display the modification icon for the buffer.
  ;; It respects option `doom-modeline-icon' and option `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; Whether display the lsp icon. It respects option `doom-modeline-icon'.
  (setq doom-modeline-lsp-icon t)

  ;; Whether display the time icon. It respects option `doom-modeline-icon'.
  (setq doom-modeline-time-icon t)

  ;; Whether display the live icons of time.
  ;; It respects option `doom-modeline-icon' and option `doom-modeline-time-icon'.
  (setq doom-modeline-time-live-icon t)

  ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
  (setq doom-modeline-unicode-fallback nil)

  ;; Whether display the buffer name.
  (setq doom-modeline-buffer-name t)

  ;; Whether highlight the modified buffer name.
  (setq doom-modeline-highlight-modified-buffer-name t)

  ;; When non-nil, mode line displays column numbers zero-based.
  ;; See `column-number-indicator-zero-based'.
  (setq doom-modeline-column-zero-based t)

  ;; Specification of \"percentage offset\" of window through buffer.
  ;; See `mode-line-percent-position'.
  (setq doom-modeline-percent-position '(-3 "%p"))

  ;; Format used to display line numbers in the mode line.
  ;; See `mode-line-position-line-format'.
  (setq doom-modeline-position-line-format '("L%l"))

  ;; Format used to display column numbers in the mode line.
  ;; See `mode-line-position-column-format'.
  (setq doom-modeline-position-column-format '("C%c"))

  ;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format'.
  (setq doom-modeline-position-column-line-format '("%l:%c"))

  ;; Whether display the minor modes in the mode-line.
  (setq doom-modeline-minor-modes nil)

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Major modes in which to display word count continuously.
  ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
  ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
  ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

  ;; Whether display the buffer encoding.
  (setq doom-modeline-buffer-encoding t)

  ;; Whether display the indentation information.
  (setq doom-modeline-indent-info t)

  ;; Whether display the total line number。
  (setq doom-modeline-total-line-number t)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum number displayed for notifications.
  (setq doom-modeline-number-limit 99)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display the workspace name. Non-nil to display in the mode-line.
  (setq doom-modeline-workspace-name t)

  ;; Whether display the perspective name. Non-nil to display in the mode-line.
  (setq doom-modeline-persp-name t)

  ;; If non nil the default perspective name is displayed in the mode-line.
  (setq doom-modeline-display-default-persp-name nil)

  ;; If non nil the perspective name is displayed alongside a folder icon.
  (setq doom-modeline-persp-icon t)

  ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display the GitHub notifications. It requires `ghub' package.
  (setq doom-modeline-github nil)

  ;; The interval of checking GitHub.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display the modal state.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal t)

  ;; Whether display the modal state icon.
  ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
  (setq doom-modeline-modal-icon t)

  ;; Whether display the modern icons for modals.
  (setq doom-modeline-modal-modern-icon t)

  ;; When non-nil, always show the register name when recording an evil macro.
  (setq doom-modeline-always-show-macro-register nil)

  ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
  (setq doom-modeline-mu4e nil)
  ;; also enable the start of mu4e-alert
  ;; (mu4e-alert-enable-mode-line-display)

  ;; Whether display the gnus notifications.
  (setq doom-modeline-gnus t)

  ;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
  (setq doom-modeline-gnus-timer 2)

  ;; Wheter groups should be excludede when gnus automatically being updated.
  (setq doom-modeline-gnus-excluded-groups '("dummy.group"))

  ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
  (setq doom-modeline-irc t)

  ;; Function to stylize the irc buffer names.
  (setq doom-modeline-irc-stylize 'identity)

  ;; Whether display the battery status. It respects `display-battery-mode'.
  (setq doom-modeline-battery t)

  ;; Whether display the time. It respects `display-time-mode'.
  (setq doom-modeline-time t)

  ;; Whether display the misc segment on all mode lines.
  ;; If nil, display only if the mode line is active.
  (setq doom-modeline-display-misc-in-all-mode-lines t)

  ;; The function to handle `buffer-file-name'.
  (setq doom-modeline-buffer-file-name-function #'identity)

  ;; The function to handle `buffer-file-truename'.
  (setq doom-modeline-buffer-file-truename-function #'identity)

  ;; Whether display the environment version.
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")

  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; By default, almost all segments are displayed only in the active window. To
  ;; display such segments in all windows, specify e.g.
  (setq doom-modeline-always-visible-segments '(mu4e irc))

  ;; Hooks that run before/after the modeline version string is updated
  (setq doom-modeline-before-update-env-hook nil)
  (setq doom-modeline-after-update-env-hook nil)
#+end_src

*** Default visual modes

#+begin_src emacs-lisp
  (dolist (mode
           '(column-number-mode           ; Show column number in mode line
             size-indication-mode         ; file size indication in mode-line
             electric-pair-mode           ; closes parens automatically for you
             smooth-scrolling-mode        ; Smooth scrolling
             show-paren-mode              ; Highlight matching parentheses
             global-hl-line-mode          ; Highlight the line you are on in all buffers
             global-visual-line-mode              ; wrap lines by default, does not let text to go all the way to the right
             ))
    (funcall mode 1))
#+end_src

*** COMMENT Golden Ratio

nice demo here at 1:49 - https://youtu.be/rwKTc4MNmt8?si=X78w7N3IH9qwS6N0&t=109

If used with ace-window - does not work properly. Turned ace-window off to test
this out. No more 4 or so windows open at the same time :) Should be able to handle that.

#+begin_src emacs-lisp
  (use-package golden-ratio
    :ensure t)
  (golden-ratio-mode 1)
#+end_src

** Modes

#+begin_src emacs-lisp
  (message "Modes")
#+end_src

Here are a list of modes(that come by default with Emacs) that I prefer to
enable by default.

#+begin_src emacs-lisp
  (dolist (mode
           '(abbrev-mode                  ; E.g. sopl -> System.out.println
             delete-selection-mode        ; Replace selected text
             dirtrack-mode                ; directory tracking in *shell*
             global-so-long-mode          ; Mitigate performance for long lines
             recentf-mode                 ; Recently opened files
             winner-mode                  ; ctrl+c+left/right redoes/undoes the window layouts
             ))
    (funcall mode 1))
#+end_src

** COMMENT EditorConfig

#+begin_src emacs-lisp
  (message "EditorConfig")
#+end_src

Using [[https://editorconfig.org/][EditorConfig]] is a must when collaborating with others. It is also a way
of having multiple tools that want to format your buffer to agree (e.g. both
the language's Emacs mode and some external formatter/prettifier).

#+begin_quote
at work where I'm dev lead, I added an .editorconfig to all our projects to
enforce some basic style consistency. I'm the only full-time Emacs user, and
everyone else uses VS Code, but we now have the same basic indentation style
per project, instead of requiring each dev to self-regulate.

Works well for us, and nobody tinkers with the .editorconfig because, well, I
would never approve that PR heheh.
#+end_quote

We must create .editorconfig file in each project directory and specify
parameters in it - https://spec.editorconfig.org/.

We can then use =editorconfig-find-current-editorconfig= function to see if the
editorconfig can see our config file.

We can then create a simple .py file:

#+begin_src python :tangle no
  def x(value):
      print(value)
#+end_src

We can see that there are 4 spaces to print statement. We can add such lines in
our .editorconfig file to change that:

#+begin_src bash :tangle no
  root = true

  [*]
  indent_style = space
  indent_size = 10
#+end_src

Now do =editorconfig-apply= and after =editorconfig-format-buffer=
function(can probably bind it to a key or do a hook, so it is ran on each save)
and the new changes to inded_size will be applied to your python file:

#+begin_src python :tangle no
  def x(value):
      print(value)
#+end_src

Found this also in the docs(can confirm that it works automatically, yes):

#+begin_quote
Normally, enabling editorconfig-mode should be enough for this plugin to work:
all other configurations are optional. This mode sets up hooks so that
EditorConfig properties will be loaded and applied to the new buffers
automatically when visiting files.
#+end_quote

Finally let's install it.

#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

** Ace-window

#+begin_src emacs-lisp
  (message "Ace-window")
#+end_src

[2021-07-01] “Ace windows” helps me to switch windows easily. Main
keybind - C-x o and then the commands that follow below.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :defer t
    :init
    ;; Set keybindings that should be available immediately
    (global-set-key (kbd "C-x o") 'ace-window)
    (global-set-key (kbd "M-0") 'ace-swap-window)
    (global-set-key (kbd "C-x v") 'aw-split-window-horz)
    :config
    ;; Configure ace-window after it is loaded
    (setq aw-keys '(?q ?w ?e ?r ?y ?h ?j ?k ?l))

    ;; Define the dispatch list for ace-window
    (defvar aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
        (?m aw-swap-window "Swap Windows")
        (?M aw-move-window "Move Window")
        (?c aw-copy-window "Copy Window")
        (?f aw-switch-buffer-in-window "Select Buffer")
        (?n aw-flip-window)
        (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
        (?c aw-split-window-fair "Split Fair Window")
        (?h aw-split-window-vert "Split Vert Window")
        (?v aw-split-window-horz "Split Horz Window")
        (?o delete-other-windows)
        ;; (?o delete-other-windows "Delete Other Windows")
        ;; (?o delete-other-windows " Ace - Maximize Window")
        (?? aw-show-dispatch-help))
      "List of actions for `aw-dispatch-default'."))
#+end_src

** Denote

#+begin_src emacs-lisp
  (message "Denote")
#+end_src

Using denote for my personal knowledge base that will last forever and does not
depend on any close-source tools(Evernote, Onenote, etc). The knowledge base is
made of simply text file, so they won't get corrupted or old/unused overtime.

*** Main denote config
#+begin_src emacs-lisp
  (use-package denote
    :ensure t
    :defer t

    ;; Denote DOES NOT define any key bindings. I just pick some of the bindings
    ;; from "Sample configuration" here - https://protesilaos.com/emacs/denote and
    ;; bind them. There are way more available functions in the docs.
    :bind (:map ag/custom-bindings-map
                ("C-c n n" . #'denote)  ;create new denote note
                ("C-c n i" . #'denote-link) ; add a link to another denote file
                ("C-c n I" . #'denote-add-links) ; add ALL denote files related to your chose keywords
                ("C-c n b" . #'denote-backlinks) ; LIST all files where current file is mentioned
                ("C-c n f f" . #'denote-find-link) ; FIND all links to other denote files
                ("C-c n f b" . #'denote-find-backlink) ; FIND all files where current file is mentioned
                )
    :hook (dired-mode . denote-dired-mode) ; highlights the filename and tags
    :config
    (setq denote-infer-keywords t)	;newly created keywords to go denote keyword list
    (setq denote-sort-keywords t)		;sort denote keywords
    ;; Automatically rename Denote buffers using the
    ;; `denote-rename-buffer-format'. Instead of full filename with date
    ;; and time and tags - show only filename
    ;; telling denote not to rename buffers, since perspective mode then does not work properly
    ;; more about it - [[denote:20231209T181842][perspective and denote conflict]]
    (denote-rename-buffer-mode -1)
    )

  (setq denote-directory (expand-file-name "~/GIT/devnotes/")) ;Set denote directory
#+end_src

*** Define a function to open a specific directory in Dired mode

#+begin_src emacs-lisp
  (defun ag/open-denote-dir-in-dired ()
    (interactive)
    (dired denote-directory))
    (define-key ag/custom-bindings-map (kbd "C-x e") 'ag/open-denote-dir-in-dired)
#+end_src

Start emacs in denote dired folder
#+begin_src emacs-lisp
  ;; (setq initial-buffer-choice #'ag/open-denote-dir-in-dired)
#+end_src

*** Change front matter(what appears on each note at the top)

More things to include here - https://orgmode.org/manual/Export-Settings.html
Control visibility - https://orgmode.org/manual/Initial-visibility.html

I specifically wanted to add the "startup" parameter in each new buffer, so
large note files would not spit all the information into my face when I open
that note. Have overview view instead.
#+begin_src emacs-lisp
(setq denote-org-front-matter
"#+title:      %s
#+date:       %s
#+filetags:   %s
#+identifier: %s
#+STARTUP:    overview
")
#+end_src

*** Denote links fix

Working, but with warnings. So not tangling it on startup and only evaluating
it when I need it. Otherwise, I am getting these warnings:

#+begin_quote
In ag/denote-link:
init.el:313:29: Warning: Unused lexical argument `file-type'
init.el:322:11: Warning: Unused lexical variable `beg'
init.el:323:11: Warning: Unused lexical variable `identifier-only'
init.el:332:20: Warning: reference to free variable ‘beg’
#+end_quote

#+begin_src emacs-lisp :tangle no
  (defun ag/denote-link (file file-type description &optional id-only)
    (interactive
     (let ((file (denote-file-prompt))
           (type (denote-filetype-heuristics (buffer-file-name))))
       (list
        file
        type
        (denote--link-get-description file type)
        current-prefix-arg)))
    (let* ((beg (point))
           (identifier-only (or id-only (string-empty-p description)))
           (filename (file-name-nondirectory file))
           (org-title (ag/denote-get-org-title file))) ;; Ensure to prefix function with the right namespace
      (insert
       (format "[[file:%s][%s]]"
               (file-name-nondirectory file) ;; Get just the filename
               (or org-title filename))))
      ;; Ensure the below logic falls under the let binding block
      (unless (derived-mode-p 'org-mode)
        (make-button beg (point) 'type 'denote-link-button)))

  (defun ag/denote-get-org-title (file)
    "Extract the title from an Org mode file."
    (with-temp-buffer
      (insert-file-contents file)
      (goto-char (point-min))
      (when (re-search-forward "^\\#\\+title: *\\(.*\\)" nil t)
        (match-string 1))))
#+end_src

*** COMMENT Denote journal with a timer

https://protesilaos.com/emacs/denote - "Journalling with a timer" part.

Good for Spanish practice.

[[https://github.com/protesilaos/tmr][TMR package]] is needed for this to work

#+begin_src emacs-lisp
  (use-package tmr
    :ensure t)
#+end_src

Create variables and add a hook to denote journal hook.
#+begin_src emacs-lisp
  (defvar my-denote-tmr-duration "10")

  (defvar my-denote-tmr-description "Practice writing in my journal")

  (defun my-denote-tmr ()
    (tmr my-denote-tmr-duration my-denote-tmr-description))

  (add-hook 'denote-journal-extras-hook 'my-denote-tmr)
#+end_src

** Org-mode

#+begin_src emacs-lisp
  (message "Org-mode")
#+end_src

I use Org mode extensively.

In buffer settings - https://orgmode.org/manual/In_002dbuffer-Settings.html

*** Org-mode generals

Something for when having images in .org file. Read devnotes.
#+begin_src emacs-lisp
  (setq org-image-actual-width nil)
#+end_src

Open org links in the same buffer as you are now. Don't like it when I can not
control it and it just opens the link in a random frame.

#+begin_src emacs-lisp
  (setq org-link-frame-setup '((file . find-file)))
#+end_src

The deeper you go in the headings, the mode indented it is. Basically makes the
org file to look nicer.
#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

Allows to toggle TAB while not on the headline, but when somewhere outside the
headline. Useful for when you want to collapse the headline when deep inside of
its contents.
#+begin_src emacs-lisp
  (setq org-cycle-emulate-tab 'white)
#+end_src

Pressing RET(enter) follows(opens) a link under cursor
#+begin_src emacs-lisp
  (setq org-return-follows-link t)
#+end_src

Open source block window under the current buffer (C-c ')
#+begin_src emacs-lisp
  (setq org-src-window-setup `split-window-below)
#+end_src

Rebind active time-stamp to inactive. For some reason I got used to using
inactive timestamps, maybe because they don't show up in agenda.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (bind-key "C-c ." #'org-time-stamp-inactive org-mode-map))
#+end_src

Change org heading continuation
#+begin_src emacs-lisp
  ;; (setq org-ellipsis "⏎")
#+end_src

Make the indentation look nicer in org mode. Pull the second level and higher
level headings from the left side.
#+begin_src emacs-lisp
;; (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

This setting is responsible for the indentation in the src code blocks. If set
to t - will preserve the indentation after you leave the source block. If set
to nil - your code will be indented with two extra spaces. Looks nice, but idk
why one would choose this option(it was my default for a looong time until now,
just figured out this option).

Actually nil is the way to go for me. Otherwise - code is structured strangely
after I close the src block.
#+begin_src emacs-lisp
  (setq org-src-preserve-indentation nil)
#+end_src

Not sure what these two do, but leaving them here.
#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
  (setq org-src-fontify-natively t)
#+end_src

*** Org-mode agenda

When a TODO is set to a done state, record a timestamp
#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

Setting up org-agenda-files using those variables
#+begin_src emacs-lisp
  ;; SECRET
  ;; (setq org-agenda-files
  ;;     (directory-files-recursively "~/GIT/devnotes/" ".org$"))

  ;; (setq org-agenda-files
  ;;     (directory-files-recursively "~/GIT/devnotes/" ".*agenda.*\\.org$"))
#+end_src

Create a keybinding for org-agenda
#+begin_src emacs-lisp
  (define-key ag/custom-bindings-map (kbd "C-c a") 'org-agenda)
#+end_src

Set default todo keywords (C-t)
#+begin_src emacs-lisp
  (setq org-todo-keywords
  (quote ((sequence "TODO(t)" "PROGRESS(p)" "|" "DONE(d)" "CANCELLED(c)"))))
#+end_src

TODO and DONE keywords already have colors assigned to them, but my newly
created "PROG" - does not. Assigning it here:

To see all the available colors, check =list-faces-display=.

#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(
          ("PROGRESS" . (:foreground "yellow" :weight bold))
          ))
#+end_src

By default when you do 'M-x org-agenda' and you go to todo's or tags or just
the agenda view - you see it like this:
#+begin_src emacs-lisp :tangle no
  (agenda  . " %i %-12:c%?-12t% s") ;; file name + org-agenda-entry-type....
#+end_src

For me that is too much information, I don't need to know in which file the
agenda item is, since I only have one agenda file. Instead of that information,
I make it as clutter free as possible by overriding everything(those file names
and etc) to a dot like so:
#+begin_src emacs-lisp
  ;; (setq org-agenda-prefix-format '(
  ;;          (agenda  . "  • ")
  ;;          (timeline  . " • ")
  ;;          (todo  . " • ")
  ;;          (tags  . " • ")
  ;;          (search . " • ")
  ;;          ))
#+end_src

Hook to display the agenda in a single window by deleting all the
other windows
#+begin_src emacs-lisp
  (add-hook 'org-agenda-finalize-hook 'delete-other-windows)
#+end_src

Defining custom agenda commands that allow me to reach the tasks that I need.
The same can almost be as quickly achieved by opening org agenda, pressing =m=
and then defining your tag by which to filter. If we count the number of key
presses - they are the same :) Interesting which method I will end up using more.
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ;; ("x" agenda)
          ;; ("u" tags "+boss-urgent")
          ;; ("v" tags-todo "+boss-urgent")
          ;; ("U" tags-tree "+boss-urgent")
          ;; ("f" occur-tree "\\<FIXME\\>")
          ;; ("h" . "HOME+Name tags searches") ;description for "h" prefix
          ;; ("hl" tags "+home+Lisa")
          ;; ("hp" tags "+home+Peter")
          ;; ("hk" tags "+home+Kim")
          ("p" . "Project searches") ;description for "h" prefix
          ("pi" tags "inbox")
          ("pe" tags "emacs")
          ("pl" tags "lifeapi")
          ("pq" tags "quotes")
          ("pa" tags "arvydasdev")
          ("pp" tags "pagalbagyvunams")
          ("pc" tags "cdp")
          ("ps" tags "smutifruti")
          ("po" tags "obelsdumas")
          ))
#+end_src

*** Org-mode refile

Set org refile targets. Refiling helps me to move headings(content) between or
different org files that I have(in this case, 'org-agenda-files') with "C-w"
command.
#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
#+end_src

*** Org-mode capture

Example of a simple capture template:

Documentation for possible template elements - https://orgmode.org/manual/Template-elements.html

Documentation for possible template expansion - https://orgmode.org/manual/Template-expansion.html

#+begin_src emacs-lisp :tangle no
  (setq org-capture-templates '(("i"	;key
                                 "Inbox"	;description
                                 entry	;type
                                 (file+headline ag/task-file "Inbox") ;target
                                 "* TODO %^{Title}\n:PROPERTIES:\nCAPTURED: %U\nWHERE: %a\nINSERT: %i\n:END:\n\n%?" ;template
                                 ;; :prepend t ; properties(append the new note to the top! BUT resets [/] if you have it setup)
                                 )))
#+end_src

Create a keybinding for org-capture.
#+begin_src emacs-lisp
  (define-key ag/custom-bindings-map (kbd "\C-cc") 'org-capture)
#+end_src

Load capture templates depending on the linux/wsl user
#+begin_src emacs-lisp
  ;; Get the current username
  (setq current-username (getenv "USER"))

  ;; Check the username and load the appropriate capture templates file
  ;; (if (string= current-username "s2753g")
  ;;     (load "~/.emacs.d/s2753g-capture-templates.el")
  ;;   (load "~/.emacs.d/default-capture-templates.el"))
#+end_src

Made a personal file for them, so I could load a different capture template
configuration for work and for personal use.

Click =C-cC= to see all the capture templates in sort of graphical view.

*** Org-mode archive

[2023-12-08 Fri] trying not to archive anything.

But if info about archiving is needed, can find it here:

http://doc.endlessparentheses.com/Var/org-archive-location.html

https://orgmode.org/worg/doc.html#org-archive-location

or in my old config -
https://github.com/arvydasg/.emacs.d/tree/20231124-Before-denote

Use internal archiving for all files
#+begin_src emacs-lisp
  (setq org-archive-location "::* Archived Tasks")
#+end_src

or can specify for each file individually with:
#+ARCHIVE: ::* Archived Tasks

*** COMMENT org-download

#+begin_src emacs-lisp
  (use-package org-download
    :ensure t)

  (setq-default org-download-image-dir "~/GIT/devnotes/media")

  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src


*** COMMENT LaTeX export

Latex config example here - https://github.com/larstvei/dot-emacs. Did not use
LaTeX much myself.

*** COMMENT Org Modern

Touch up the appearance of org mode files with some fancy UTF-8 characters.
I disable ~org-modern-block-fringe~ due to [[https://github.com/minad/org-modern/issues/144][org-modern conflicting with]]
~org-adapt-indentation~.

#+begin_src emacs-lisp
  ;; Modern looks for Org
  (use-package org-modern
    :ensure t
    :after org
    :hook (org-mode . org-modern-mode)
    :config
    (setq org-modern-block-fringe nil))
#+end_src

** Version control

#+begin_src emacs-lisp
  (message "Version control")
#+end_src

[2021-07-01] “Magit” - can not imagine working with git without
it. Instead of writing full commands like: “git add .” and then “git
commit -m ‘bla blaa’” then “git push”… I can simply =C-x g= for a git
status. Then =s= to do git add. And finally =C-c C-c= to invoke git
commit and simply write a message. Then press =p= and I just pushed
the changes. Way quickier than the termina, believe me.

Some notes:

- install git first on emacs - https://www.youtube.com/watch?v=ZMgLZUYd8Cw
- use personal access token
- add this to terminal to save the token for furher use
- git config –global credential.helper store

Execute the following lines in your terminal before trying to do
any commands with Magit.

git config --global credential.helper store
git config --global user.name arvydasg
git config --global user.email azegaspa@gmail.com

When you push anything, you will get prompted to enter a
password. Enter the ¨personal access token¨ from github developer
settings.

Cool, can see the commands magit is running by going to "magi-process" buffer
in emacs while in git repo

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status)))
#+end_src

[2022-03-08 An] https://github.com/dgutov/diff-hl. Show git diff changes in the
buffer "sidebar".
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :defer t
    :config
    ;; global-diff-hl-mode is hooked to the after-init-hook. This will enable
    ;; diff-hl globally after Emacs finishes initializing. Using after-init-hook
    ;; ensures that diff-hl is activated only after the majority of the startup
    ;; process is completed, reducing the impact on the initial load time
    (add-hook 'after-init-hook #'global-diff-hl-mode))

  ;; Activates diff-hl, highlighting changes in version-controlled files directly
  ;; in the buffer, providing visual cues for modifications using different
  ;; colors or markings, helping to track changes made to files in various
  ;; programming modes or buffers.
  (add-hook 'emacs-lisp-mode #'diff-hl-mode)
  (add-hook 'prog-mode-hook #'diff-hl-mode)
  (add-hook 'org-mode-hook #'diff-hl-mode)

  ;;  Integrates diff-hl within Dired mode, displaying file status indicators
  ;;  (e.g., added, modified, deleted) directly within the Dired buffer,
  ;;  facilitating quick identification of changes in the directory listing based
  ;;  on version control status.
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)

  ;; An essential hook for magit, updates the diff-hl indicators in the Magit
  ;; status buffer after a refresh, ensuring the displayed file changes align
  ;; with the status shown in magit.
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-post-refresh)

  ;;  Enhances diff-hl by displaying indicators in the left margin of the buffer,
  ;;  providing a concise overview of changes made to version-controlled files,
  ;;  aiding in identifying modifications in programming and org buffers.
  (add-hook 'prog-mode-hook #'diff-hl-margin-mode)
  (add-hook 'org-mode-hook #'diff-hl-margin-mode)
  (add-hook 'dired-mode-hook 'diff-hl-margin-mode)
#+end_src

** Completion UI

#+begin_src emacs-lisp
  (message "Completion UI")
#+end_src

*** Vertico

vertico.el - VERTical Interactive COmpletion

[2023-11-26] decided to try out vertico instead of ivy.  Ivy
depends on a lot of packages, vertico is more simple. It also
replaces amx for M-x search. Prot inspired me to try it out. Let's
see.

It is everywhere - Ctrl-x f, M-x, ctrl-x d, ctrl-h v... everywhere
where you are trying to list and jump to something - vertico is
there.

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Show more candidates
    (setq vertico-count 10)
    )
#+end_src

*** COMMENT Vertico-postframe

The completions are centered in a posframe (a frame at point). Using posframe
to show Vertico.

But still, some commands that you launch over M-x, like =rgrep= will require
you to look down to finish the command. And I am very very much accustomed to
looking to the bottom left corner.

It also blocks important info in the buffer when I use it.. Swiper still is at
the bottom.. yeah.. this package is not quite there yet.

#+begin_src emacs-lisp
  (use-package vertico-posframe
    :ensure t
    :config
    (vertico-posframe-mode 1)
    (setq vertico-posframe-width 100
    vertico-posframe-height vertico-count))
#+end_src

*** Savehist

Use the built in savehist-mode to prioritize recently used commands.

#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode 1))
#+end_src

*** Marginalia

With Marginalia, we get better descriptions for commands inline. M-x, C-c f,
C-x b. Adds annotations at the margin of the minibufer for completion
candidates

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode 1))
#+end_src

*** COMMENT Auto Completion with Corfu

Modular text completion framework for code. Using instead of company package.

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode 1)
    (corfu-popupinfo-mode 1)
    (corfu-history-mode)
    :config
    (setq corfu-cycle t
    corfu-auto t
    corfu-auto-delay 0
    corfu-auto-prefix 2
    corfu-popupinfo-delay 0.5))
#+end_src

*** Auto Completion Company

Write benefits and disadvantages to corfu. Have the config ready from the old
config.

https://emacs.stackexchange.com/questions/23840/text-completion-suggestion-in-emacs -
I guess company mode is best for auto completion.

But company mode can autocomplete words that are already in the file. So far
only the =M-/= (dabbrev-expand) can do that, it is built in function. But it
does not propose words to you visibly as you type, that's the problem.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    ;; :defer t
    :config
    ;; activated after Emacs finishes initializing
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 2)
    (setq company-tooltip-offset-display 'lines))
#+end_src

*** Orderless

Let's you to type "pa re con" in vertico minubuffer instead of
"package-refresh-contents". Orderless completion.

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic partial-completion)
          completion-category-defaults nil
          orderless-component-separator "[ |]"
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Navigation and searching

#+begin_src emacs-lisp
  (message "Navigation and searching")
#+end_src

*** Consult
The package Consult improves navigation and searching.

Consult - a super great package that will improve and make my workflow way more
interesting in emacs. It overrides a lot of default commands, but I am not
angry about it at all, these are just pure improvements.

Consult has lots of functions to keybind to. I looked through them all and
decided to keybind only particular ones. To see more of the functions, find
them in M-x ~consult-~

#+begin_src emacs-lisp
  ;; (use-package consult
  ;;   :ensure t
  ;;   :bind (:map ag/custom-bindings-map
  ;;               ("C-x b" . consult-buffer)
  ;;               ("C-c m" . consult-man)
  ;;               ("C-c r" . consult-ripgrep)))

  ;; Example configuration for Consult
  (use-package consult
    :ensure t
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command) ;cool, lists all the various mode commands available in the current buffer
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)

           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer(too many options tbh)
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer

           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)

           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop

           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)

           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)      ;; ripgrep stuff
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ;; ("M-s r" . consult-ripgrep)         ;; overriden it below
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)

           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch

           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Compleptions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)


    ;; imenu is very useful when needing to filter the variables/functions in the buffer
    ;; for each mode the configuration should be separate, since originally its only created for elisp code
    ;; https://www.reddit.com/r/emacs/comments/1chh9yp/consultimenu_and_narrowing_python_c/

    ;; Ok so to implement this - took a while. below, the defcustom block is
    ;; taken from consult source code. It is here only to "register" this
    ;; consult-imenu-config variable so later I can append to it and add
    ;; "python-mode" configuration. This below is not touched,, only the
    ;; add-to-list part. Now when I am in python buffer, with eglot on, I can
    ;; press M-g i and have a list of functions/classes/variables by writing f/c/v SPC
    (defcustom consult-imenu-config
      '((emacs-lisp-mode :toplevel "Functions"
                         :types ((?f "Functions" font-lock-function-name-face)
                                 (?m "Macros"    font-lock-function-name-face)
                                 (?p "Packages"  font-lock-constant-face)
                                 (?t "Types"     font-lock-type-face)
                                 (?v "Variables" font-lock-variable-name-face))))
      "Imenu configuration, faces and narrowing keys used by `consult-imenu'.

  For each type a narrowing key and a name must be specified.  The
  face is optional.  The imenu representation provided by the
  backend usually puts functions directly at the toplevel.
  `consult-imenu' moves them instead under the type specified by
  :toplevel."
      :type '(repeat (cons symbol plist))
      :group 'consult)

    (add-to-list 'consult-imenu-config
                 '(python-mode
                   :toplevel "Function"
                   :types
                   ((?f "Function" font-lock-function-name-face)
                    (?m "Method" font-lock-function-name-face)
                    (?c "Class" font-lock-property-use-face)
                    (?M "Module" font-lock-builtin-face)
                    (?F "Field" font-lock-regexp-face)
                    (?v "Variable" font-lock-constant-face))))

    )

  ;; overriding some default consult keybindings
  (define-key ag/custom-bindings-map (kbd "C-x p g") 'consult-ripgrep) ; Remaping the default "M-s r" for ripgrep. Not using C-r suz of isearch in terminals. [2024-01-09 Tue] remapping to C-x p g to replace the sucky project.el ripgrep and to free up C-x r for bookmarks
  ;; (define-key ag/custom-bindings-map (kbd "C-x q") 'consult-imenu) ; Remaping the default "M-s somethnig"

#+end_src

*** Swiper

The nicest buffer search.

#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :defer t
    :bind ("C-s" . swiper))
#+end_src

*** Dired

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook #'auto-revert-mode)
  (add-hook 'dired-mode-hook #'hl-line-mode)	; highlight the selected line
  (add-hook 'dired-mode-hook #'dired-hide-details-mode) ;Hide rights/size/created info, etc in dired buffer. To see details again click left bracket
  (setq dired-listing-switches "-al --group-directories-first") ; Sort by directoreis first in dired
  ;; Always copy/delete recursively
  (setq dired-recursive-copies  'always)
  (setq dired-recursive-deletes 'top)

  (define-key ag/custom-bindings-map (kbd "C-x C-d") 'dired-jump)
#+end_src

Enable dired-find-alternate-file. In new config it always asks at the beginning
to enable this command, since it is disabled. I find it annoying, I always use
“a” to open a folder in dired and I will continue doing so. The piece of code
below does it so that I don’t get prompted “do you really want to use this
command” all the time.

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

*** Sidebar

**** COMMENT dired-sidebar

Sidebar, does the job, but don't like that ace-window clasifies that sidebar as
a window to possibly jump to. When I have 2 windows open side by
side(+sidebar), I can no longer jump to one of them with =C-x o=. I must choose
to which buffer to jump.. not good.

#+begin_src emacs-lisp
  (use-package dired-sidebar
    :hook
    (dired-sidebar-mode-hook . hide-mode-line-mode)
    (dired-sidebar-mode-hook . hl-line-mode)
    (dired-sidebar-mode-hook . variable-pitch-mode)
    (dired-sidebar-mode-hook . init-dired-sidebar))
#+end_src

Could try to ignore that buffer in a similar way, but the sidebar does not have
a name assigned to it..

#+begin_src emacs-lisp :tangle no
  :config
  (add-to-list 'aw-ignored-buffers "*Sidebar*")) ;; Replace "*Sidebar*" with the actual name of the dired-sidebar buffer
#+end_src

**** Treemacs

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] seems like an extensible sidebar package. Been using it for a while
before, does not have the same problem like with =dired-sidebar=.

#+begin_src emacs-lisp
  ;; The following use-package snippet includes a list of all of
  ;; treemacs’ configuration options in their default setting.
  ;; Setting them, or activating the minor modes yourself is not
  ;; necessary, they are only listed here to encourage
  ;; discoverability.

  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil
            treemacs-follow-mode t
            treemacs-filewatch-mode t
            treemacs-fringe-indicator-mode 'always
            treemacs-hide-gitignored-files-mode t))
    :bind (:map ag/custom-bindings-map
                ("M-`" . #'treemacs-select-window))
    )

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

*** Session management

You work on many windows and many layouts - then you close emacs. All is lost,
windows are lost, layouts are lost, you can not get them back with
=winner-mode=. This is what session management is. Being able to get back to
those sessions from last closed emacs session.

All possible tools listed [[https://www.emacswiki.org/emacs/SessionManagement][here]].

**** Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :defer t
    :bind (("C-z" . persp-mode))
    :custom
    (persp-mode-prefix-key (kbd "C-z"))
    :config
    ;; Sort perspectives by time created
    (setq persp-sort 'created)
    ;; Set perspective modestring dividers
    ;; (setq persp-initial-frame-name "zaltys")
    (setq persp-modestring-dividers '("[ " " ]" " | "))
    ;; Enable perspective mode
    (persp-mode))

  ;; Define keybindings for perspective mode (windows like window switching baby!)
  (define-key ag/custom-bindings-map (kbd "C-<tab>") 'persp-next)
  (define-key ag/custom-bindings-map (kbd "C-<iso-lefttab>") 'persp-prev)
#+end_src

Load a custom perspective on each emacs launch
#+begin_src emacs-lisp
  ;; (setq persp-state-default-file "~/GIT/persp")
  ;; (add-hook 'emacs-startup-hook #'(lambda () (persp-state-load persp-state-default-file)))
#+end_src

** Terminal

#+begin_src emacs-lisp
  (message "Terminal")
#+end_src

*** Vterm

Using vterm is like using Gnome Terminal inside Emacs.

To copy from vterm buffer - first enable vterm-copy-mode with C-c C-t. To
deactivate the mode - same command.

=sudo apt install fish libtool libtool-bin autoconf automake cmake g++
libncurses-dev libz-dev libglib2.0-dev (for vterm)=

In case you need to copy something from vterm terminal, use =vterm-copy-mode=
by pressing =C-c C-t=.

#+begin_src emacs-lisp
  (use-package vterm
    :defer t				; deferring until I use it with vterm-toggle
    :init
    (setq vterm-max-scrollback 100000)
    :hook
    (vterm-mode . (lambda () (toggle-truncate-lines 1))
    ;; using Fish as default vterm bash. Fish(Friendly interactive shell) is
    ;; basically buffed bash shell. Syntax highlighting, autocompletion, aliases
    ;; More about fish - https://www.youtube.com/watch?v=C2a7jJTh3kU&ab_channel=LukeSmith

    ;; [2023-12-09 Sat] turning off fish. Reverse isearch does not work as I
    ;; expect.. no thanks, turning fish off.

    ;; (setq vterm-shell "fish")
    ))
#+end_src

vterm-toggle

#+begin_src emacs-lisp
  (use-package vterm-toggle
    :ensure t
    :defer t
    :bind(:map ag/custom-bindings-map
               ("C-`" . vterm-toggle)		; toggles vterm window
               ("C-<return>" . vterm-toggle-insert-cd) ; insert current dir and enter it when in vterm shell
               ))
#+end_src

#+begin_src emacs-lisp
  (defun create-new-vterm ()
    "Create a new vterm buffer if one already exists."
    (interactive)
    (let ((vterm-buffer-found nil))
      (dolist (buffer (buffer-list))
        (when (with-current-buffer buffer
                (derived-mode-p 'vterm-mode))
          (setq vterm-buffer-found t)))
      (if vterm-buffer-found
          (vterm (generate-new-buffer-name "*vterm*"))
        (vterm))))

  (global-set-key (kbd "C-c v") 'create-new-vterm)
#+end_src



** Programming

#+begin_src emacs-lisp
  (message "Programming")
#+end_src

Good intro for setting up programming language -
https://www.youtube.com/watch?v=iAjIoKqbmg8&ab_channel=BrentWestbrookx

*** Set up syntax highlighting with Tree-stitter! For all languages

First of all, do you know which languages you will be using? In my case it's
JavaScript and Python. Let's use the built in tree-sitter to download the
libraries for syntax highlighting(by default js and py files get recognized and
syntax is highlighted, but for other languages(like rust) you will must install
treesit library for syntax highlighting of rust code)

Steps like in this video - https://www.youtube.com/watch?v=iAjIoKqbmg8&ab_channel=BrentWestbrook
1. have git and c compiler installed(gcc or smth else(should be in your nix config already))
2. do =treesit-install-language-grammar= and write javascript, next next next,
   then check the messages buffer if it was really installed "Library installed
   to ~/.emacs.d/tree-sitter/libtree-sitter-javascript.so"
3. Do the same for python "Library installed to
   ~/.emacs.d/tree-sitter/libtree-sitter-python.so"

*** Devdocs - for all languages

https://github.com/astoff/devdocs.el

Inspiration config - https://github.com/gopar/.emacs.d?tab=readme-ov-file#devdocs

To install docs of a particular language, do =M-x devdocs-install=

#+begin_src emacs-lisp
  (use-package devdocs
    :ensure t
    :defer t
    :bind (:map ag/custom-bindings-map
                 ("C-h D" . devdocs-lookup)))
#+end_src

*** Flymake

This is not a spell check, but code error check.

Mostly useful when having lsp or eglot in the buffer and it lists the errors.

https://www.gnu.org/software/emacs/manual/html_node/emacs/Flymake.html

Use it when checking for syntax/code errors. =consult-flymake= helps with this.
=M-g f=.

Turning it off on [2024-06-10 Mon]. I could not make flymake to show errors in
the modeline, only flycheck would show the errors. So I then googleed what is
the difference between the two:

#+begin_quote
In summary, both Flycheck and Flymake offer on-the-fly syntax checking for
Emacs, but Flycheck is generally preferred for its richer feature set, better
language support, and external tool integration. If you're starting a new Emacs
configuration or project, Flycheck is likely the better choice.
#+end_quote

Nvm seems like eglot turns it on, so leaving it running for a while, maybe it
will catch some errors at some point.

*** Python
**** Inspiration for python development in emacs

- eglot+numpydoc+blacken+poetry https://gist.github.com/Nathan-Furnal/b327f14e861f009c014af36c1790ec49
- jupyter+elpy+flycheck https://realpython.com/emacs-the-best-python-editor/
-

If using elpy together with corfu - you will get double suggestions. Do smth about that.

**** Not having any python specific configuration

Syntax is partyly highlighted, python mode is on when I enter the .py buffer.

Seems like Emacs has SOME python support.

**** Setting up virtual environments

***** Pyvenv
#+begin_src emacs-lisp
  (use-package pyvenv
    :ensure t
    :defer t
    ;; load pyvenv only after one of the commands has been used(reduces emacs
    ;; init time)
    :commands (pyvenv-activate pyvenv-deactivate pyvenv-workon pyvenv-create))
#+end_src

=pyvenv-create=
=pyvenv-workon=
=pyvenv-activate=

Above are some of the commands to work with python virtual environments.

Before doing any of python development work, get into a virtual environment.

In terminal you should be able to see which venv you are in by doing

#+begin_src bash :tangle no
  which python
#+end_src

***** COMMENT Pipenv

- Note taken on [2024-01-02 Tue 07:52] \\
  cant figure out how it works, disabling. Sticking with pyvenv.
- Note taken on [2024-01-02 Tue 07:40] \\
  [2024-01-02 Tue] As long as I remember I was using pyvenv. But I will try to
  use pipenv instead of pyvenv because pipenv is "newer"? and it is recommended
  by doom-modeline - https://github.com/seagle0128/doom-modeline/issues/109. With
  pyvenv it's not possible to show current env in modeline.

#+begin_src emacs-lisp
  (use-package pipenv
    :defer t
    :ensure t)
#+end_src

**** Eglot

Nice intro to eglot:
 - https://www.youtube.com/watch?v=NQJBvp77WCo&ab_channel=whatacold
 - https://www.adventuresinwhy.com/post/eglot/

NOTE: Eglot does not work with python3.11!!! Install a lower python version.

Using Elpy for python development seems like it's enough, but Elpy its only for
Python. And elpy is no longer maintained.

Since I am not developing ONLY in python, I need something more universal,
something that can handle multiple programming languages.

One option is LSP - https://github.com/emacs-lsp/lsp-mode. It could be used,
BUT something similar like it is already built in withing Emacs 29 and it's
called Eglot - https://github.com/joaotavora/eglot. Better use something that's
built in, don't you think? Emacs peeps have made a decision to include Eglot
into it's source, so it must be good.

To use Eglot it, simply write =M-x eglot= when in a Python file(or any other
file that you have language server of installed in your system). If it's first
time running eglot, you will get a message that no language server is
installed.

#+begin_src emacs-lisp
  ;; Define a function to load eglot only when entering Python mode
  (defun my/load-eglot ()
    (require 'eglot))

  ;; Add a hook to load eglot when entering Python mode
  (add-hook 'python-mode-hook #'my/load-eglot)
#+end_src

***** Eglot virtualenv setup for python

- create a virtual env with =pyvenv-create=
- activate the env with =pyvenv-workon=
- Open terminal(vterm, eshell, shell) and write =which python= and make sure
  you are inside the virtual environment that you have created in previous
  steps
- install language server with =pip install python-lsp-server[pyls]= WARNING
  pylsp is [[https://github.com/joaotavora/eglot/discussions/1408#discussioncomment-9724717][bugged]] if installed with [all]!!! Use pyls instead (install all
  language servers wiht [all] command and then declare to use pyls in the eglot
  config.)
- Or install ALL the possible thingies [[https://github.com/python-lsp/python-lsp-server?tab=readme-ov-file#installation][mentioned here]] with =pip install
  'python-language-server[all]'=
- open a python file in emacs
- run =M-x eglot=
- Now when you do =M-x eglot= - you it will get connected to the language
  server. AND you will start noticing the errors, warnings and so on.

You will be able to jump to definition now, amazing! Docs will work also.
Warnings/errors all over the place. Seems like it does work.

[2024-01-10 Wed] Previously I would do the method described above to work with
python files. But that is tedious, better make it automatic, like described
here - https://www.adventuresinwhy.com/post/eglot/.

But now it does not know where the language server is. Previously I would
activate venv that has language server, but now we did not.

- create virtual environment anywhere on your machine(with pyvenv or just
  python -m venv), any way. (I prefer the emacs way, so that all of the venvs
  are in ~/.virtualvenvs folder). In my case it is named "base""
- Open terminal(vterm, eshell, shell) and write =which python= and make sure
  you are inside the virtual environment that you have created in previous
  steps
- install language server with =pip install 'python-language-server[all]'=
- =pip list= to confirm that it was properly installed
- create/open =~/.bashrc= file
- add the following line to it - =export PATH=$PATH:/home/s2753g/.virtualenvs/base/bin=
- run =source ~/.bashrc= in your wsl/linux terminal
- restart emacs/and/or your wsl also
- do =echo $PATH= and make sure  you see your virtual environment in the path
- open a python file in emacs
- eglot must have started automatically by now, congrats

So no whenever we want some package globally, we install it in the "base"
virtual environment and when we need to activate project specific virtual
environment, we can do that also. Packages will be taken from both the
environments. No more requirements.txt collision.

[2024-01-10 Wed] Don't use python relative paths like from =.utils import bla=.
Better use =app_name.utils import bla=. The second way is recognizable for
elpy.

[2024-01-11 Thu] NOTE that if package is NOT installed globally(in base env)
and installed only in your additional virtual env - eglot will not notice that.
Better install all packages in base env to have a variaty of packages there.
And to launch/build stuff - use virtualenv. NOTE NOTE - actually it will work
if you activate the virtual environment AND then enable eglot in current
buffer(or restart eglot if it already was enabled)

***** NEW - install python-language-server/black GLOBALLY not in your venv

We will be using pipx - https://github.com/pypa/pipx?tab=readme-ov-file

- Add pipx to your nixos installed apps =python310Packages.pipx= 3.11 version
  is not supported by eglot
- sudo nixos-rebuild switch
- pipx
- pipx list
- pipx install pycowsay
- pipx ensurepath
- pipx list
- pycowsay moo
- pipx install python-language-server
- pipx install black

And now even when you are NOT in a virtualenv, eglot will run, because
python-language-server is installed globally. The same is if you ARE in the
virtualenv.

***** Launch Eglot upon opening python file

Since we have virtualenv's setup, we can now safely ask Emacs to launch eglot
when opening python files.

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'eglot-ensure)
#+end_src

***** COMMENT Turn on `flyspell-mode' for comments and strings.

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'flyspell-prog-mode)
#+end_src

***** Toggle superword movement and editing

 Enabling it changes the definition of words such that characters which have
 symbol syntax are treated as parts of words: e.g., in `superword-mode',
 \"this_is_a_symbol\" counts as one word.

 this_is_a_symbol. With superword mode, when pressing M-f or M-b you will jump
 from t in this to l in symbol. Instead of "this", then "is", then "a"...

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'superword-mode)
#+end_src

***** Selectively hide/show code and comment blocks

Strange shortcut for this, but good to know it exists.

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'hs-minor-mode)
#+end_src

***** COMMENT figure out how to make this work

from here https://www.adventuresinwhy.com/post/eglot/

#+begin_src emacs-lisp
  (setq-default eglot-workspace-configuration
                '((:pylsp . (:configurationSources ["flake8"]
                             :plugins (
                                       :pycodestyle (:enabled :json-false)
                                       :mccabe (:enabled :json-false)
                                       :pyflakes (:enabled :json-false)
                                       :flake8 (:enabled :json-false
                                                :maxLineLength 88)
                                       :yapf (:enabled :json-false)
                                       :autopep8 (:enabled :json-false))))))
#+end_src

***** COMMENT look into tree-sitter

**** Shortcuts

if you want to write functions quickier, use yasnippet-snippets. Refer to that
package for instructions.

f.x
if + <TAB>
def + <TAB>

**** COMMENT Be able to source python code blocks in org files

This rerely used feature adds significantly to emacs init time, disabling it.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+end_src

For example like so:

# By adding :results output to the header arguments of the source block, you
# instruct Org mode to capture the standard output of the code block execution
# and display it as the result.

#+begin_src python :tangle no :results output
  a = 5
  print(a)
#+end_src

**** Black formatter on save

- https://black.readthedocs.io/en/stable/integrations/editors.html#emacs
- https://github.com/wbolster/emacs-python-black

Make sure black is installed in your virtual environment:

#+begin_src bash :tangle no
  pip install black
#+end_src

#+begin_src emacs-lisp
  (use-package python-black
    :ensure t
    :defer t
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

dwmi means "do what I mean".

=python-black-on-save-mode-enable-dwim= uses heuristics to autodetect if a file
should be autoformatted:

- file inside a site-packages/ directory? ➡ do not format
- project not using black? ➡ do not format

in your case the autodetection that your project uses black likely doesn't
work. Having a line like this in =pyproject.toml= should make that work:

#+begin_src toml :tangle no
  # https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-format
  [tool.black]
  # https://peps.python.org/pep-0008/#maximum-line-length
  line-length = 79
  exclude = '''
  /(
      \.git
    | \.venv
    | migrations
  )/
  '''
#+end_src

It does indeed work then.

- Have virtual env activated
- Have black installed
- Have pyproject.toml with [tool.black]

Black formatter should work in your project.

To manually run black in a project, write =black .=.

**** Pylint linting

Lints code according to the rules. Line lengths, etc.

First - =pip install pylint=.

Have =.pylintrc= in your project's directory. Can generate one with =pylint
--generate-rcfile > ~/.pylintrc=.

=C-c ! l= to see a list of errors.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :hook (prog-mode . flycheck-mode)
    :config
    (setq flycheck-python-pylint-executable "pylint"))
#+end_src

Flycheck will read the contents of =.pylintrc= and format the =.py=
accordingly.

Can also declare a single =.pylintrc= globally like so =(setq flycheck-pylintrc "~/.pylintrc")=, but I like to use one in each project.

**** COMMENT Setup python virtual envs

#+begin_src emacs-lisp
  ;; set a default environment for each python file opening session, elpy packages will lie there(flake, yapf, black, etc)
  (setq elpy-rpc-virtualenv-path "/home/s2753g/.virtualenvs/duona/")
#+end_src

**** COMMENT Install elpy
#+begin_src emacs-lisp
  ;; (use-package elpy
  ;;   :ensure nil
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'elpy-enable)) ; Enable Elpy in python-mode

  (use-package elpy
    ;; leave both defer and ensure
    :ensure t
    :defer t
    :init
    ;; deferring the loading of elpy until you specifically activate a Python
    ;; buffer. This way, elpy is only loaded when it's needed, reducing the
    ;; overall impact on Emacs startup time.
    (with-eval-after-load 'python
      (elpy-enable)))
#+end_src

**** COMMENT Debugging with dap-mode

**The following configuration was tested at work, not at home.**

https://emacs-lsp.github.io/dap-mode/page/configuration/

No need for lsp, independent. can use with eglot/lsp or without. No need for
node stuff or other js stuff.

#+begin_quote
For debugging Python code in Emacs, especially when working with Django and
using eglot for language server support, you have a few options for debuggers
that integrate well with this setup. The primary debugger for Python is =pdb=,
but there are enhanced versions like =ipdb= (which integrates with IPython for
a more interactive experience) and =pdb++= (which offers additional features
and improvements over pdb).

You can utilize these debuggers with packages that enable interactive debugging
sessions within Emacs. A popular choice is =dap-mode= (Debug Adapter Protocol
mode), which works well with eglot and supports various debuggers.
#+end_quote

#+begin_src emacs-lisp
  (use-package dap-mode
    :commands dap-debug
    :hook ((python-mode . dap-ui-mode) (python-mode . dap-mode))
    :config
    ;; dap-debug has many different modes, we activate python mode
    (require 'dap-python)
    ;; pip install debugpy (in virtualenv that is reachable for all emacs
    ;; sessions. Base in my case.) This will add the python related configuration
    ;; to dap-debug.
    (setq dap-python-debugger 'debugpy)

    ;; Enable dap-auto-configure-mode(shows default windows)
    (dap-auto-configure-mode 1)
    ;; configure the default windows
    ;; (setq dap-auto-configure-features '(sessions locals breakpoints expressions repl controls tooltip output))

    ;; (dap-register-debug-template "Neveikia Shipping"
    ;;                            (list :name "Python: Django"
    ;;                                  :type "python"
    ;;                                  :args "runserver"
    ;;                                  :cwd "~/GIT/shipping/code/backend/app/"
    ;;                                  :module nil
    ;;                                  :console "integratedTerminal"
    ;;                                  :program "~/GIT/shipping/code/backend/app/manage.py"
    ;;                                  :request "launch"
    ;;                                  :django t
    ;;                                  ))

    (dap-register-debug-template "Test app"
                                 (list :name "Python: Django"
                                       :type "python"
                                       :args "runserver"
                                       :cwd "~/GIT/django-dap-debug/mysite/"
                                       :module nil
                                       :console "integratedTerminal"
                                       :program "~/GIT/django-dap-debug/mysite/manage.py"
                                       :request "launch"
                                       :env '(("DJANGO_SETTINGS_MODULE" . "mysite.settings"))
                                       :django t
                                       ))
    )

#+end_src

*** HTML

**** Snippets
for tag completion - using yasnippet snippets
**** COMMENT emmet-mode
- Note taken on [2024-01-10 Wed 14:30] \\
  after installing and reading web-mode docs, realized that web mode also has
  some tag completion help, so might not use emmet for this. Web mode is a must
  for django templates.

[2021-07-01] “Emmet mode” - HTML completion. Click c-j to autocomplete a tag.
Cheat sheet - https://docs.emmet.io/cheat-sheet/

SU WEB MODE PRADEDA flycheck nebeveikti ir emmet durniuoja.

[2024-01-10 Wed] enabling it again, should click C-j to expand tag I think.
Using emmet ONLY for tags like p etc, since yasnippet-snippets does not provide
such basic tags.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    :hook ((web-mode . emmet-mode)
           (html-mode . emmet-mode)
           ;; turning off dell scss C-c C-c shortcut
           ;; (css-mode . emmet-mode)
           (sgml-mode . emmet-mode)))
  #+end_src

**** web-mode
- Note taken on [2024-01-10 Wed 14:34] \\
  =C-e= in html buffer provides many keybindings.

  Also, for django you can use =C-c C-s= to have a list of snippets! Like if, block ,etc! Nice.

https://web-mode.org/

https://www.reddit.com/r/emacs/comments/ram6jz/i_need_some_help_on_how_to_use_emacs_for/

Web mode in my case is useful when I want to edit html files, but django(jinja)
style. Web mode has language specific engines, "django" engine is one of them.

#+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :defer t
      :config
      ;; Enable web-mode for all HTML files
      (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode)))

    ;; all the .html files in these directories will have "django" engine applied
    ;; to them and syntax formatting will work properly
    (setq web-mode-engines-alist
          '(
            ("django" . "/home/s2753g/GIT/rights/.*\\.html\\'")
            ("django" . "/home/s2753g/GIT/shipping/.*\\.html\\'")
            ("django" . "/home/s2753g/GIT/django/.*\\.html\\'")
            ("django" . "/home/s2753g/GIT/django-unfold/.*\\.html\\'")
            ("django" . "/home/s2753g/GIT/django-playground/.*\\.html\\'")
            ("django" . "/home/s2753g/GIT/django-htmx/.*\\.html\\'")
            ))
#+end_src

*** COMMENT Chatgpt

https://github.com/xenodium/chatgpt-shell

Created .authinfo file with such content:

#+begin_src bash :tangle no
  machine api.openai.com password <KEY-HERE>
#+end_src

Then was able to install and use the package:

#+begin_src emacs-lisp
  (use-package chatgpt-shell
    :ensure t
    :bind (("C-x m" . chatgpt-shell))
    ;; :init
    ;; (add-to-list 'display-buffer-alist
    ;;              '("\\*chatgpt\\*"
    ;;                display-buffer-in-side-window
    ;;                (side . right)
    ;;                (slot . 0)
    ;;                (window-parameters . ((no-delete-other-windows . t)))
    ;;                (dedicated . t)))

    :bind (:map chatgpt-shell-mode-map
                 (("RET" . newline)
                 ("M-RET" . shell-maker-submit)
                 ("M-." . dictionary-lookup-definition)))
    :custom
    (chatgpt-shell-openai-key
     (auth-source-pick-first-password :host "api.openai.com"))
    (chatgpt-shell-transmitted-context-length 5)
    (chatgpt-shell-model-versions '("gpt-3.5-turbo-16k" "gpt-3.5-turbo")))
    ;; (chatgpt-shell-model-versions '("gpt-4" "gpt-3.5-turbo-16k" "gpt-3.5-turbo"  "gpt-4-32k")))
#+end_src

But I got a message saying "You exceeded your current quota, please check your
plan and billing details". Okay, not going to buy anything for now.

Info about the credits/limits here:
- https://platform.openai.com/usage
- https://platform.openai.com/account/limits

*** COMMENT simple-httpd

#+begin_src emacs-lisp
(use-package simple-httpd
  :ensure t)
#+end_src

*** COMMENT Bash

wanted to have completion in .sh files, but this seems to be for shell terminal?

#+begin_src emacs-lisp
  (use-package bash-completion
    :ensure t)
#+end_src

** Lorem ipsum

#+begin_src emacs-lisp
  (message "Lorem ipsum")
#+end_src

Do you ever want to insert some [[https://en.wikipedia.org/wiki/Lorem_ipsum][Lorem ipsum]]?

#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :ensure t
    :defer t)
#+end_src

Now, run ~M-x lorem-ipsum-insert-paragraphs~ and get:

#+begin_quote
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec hendrerit
tempor tellus. Donec pretium posuere tellus. Proin quam nisl, tincidunt et,
mattis eget, convallis nec, purus. Cum sociis natoque penatibus et magnis dis
parturient montes, nascetur ridiculus mus. Nulla posuere. Donec vitae dolor.
Nullam tristique diam non turpis. Cras placerat accumsan nulla. Nullam
rutrum. Nam vestibulum accumsan nisl.
#+end_quote

** Multiple-cursors

#+begin_src emacs-lisp
  (message "Multiple cursors")
#+end_src

Select same words inside the buffer and replace them - wow!!

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (:map ag/custom-bindings-map
                ("C->" . mc/mark-next-like-this)
                ("C-<" . mc/mark-previous-like-this)
                ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** Expand region

#+begin_src emacs-lisp
  (message "Expand region")
#+end_src

Increase selected region by semantic units. Good for quickly selecting text in
between brackets or parenthesis.
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (:map ag/custom-bindings-map
                ("C-=" . er/expand-region)))
#+end_src

** Mode specific

#+begin_src emacs-lisp
  (message "Mode specific")
#+end_src

*** yaml-mode

Emacs Major mode for yaml-formatted files

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
    #+end_src

*** markdown-mode

Emacs Major mode for Markdown-formatted files

#+begin_src emacs-lisp
  (use-package markdown-mode
  :ensure t
  :mode ("\\.md\\'" . markdown-mode)
        ("\\.markdown\\'" . markdown-mode))
#+end_src

*** COMMENT dockerfile-mode

Emacs Major mode for Dockerfile-formatted files

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+end_src

*** nix-mode

#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+end_src

** Which-key

#+begin_src emacs-lisp
  (message "Which key")
#+end_src

[2021-07-01] A package that displays the available keybindings in a popup. The
package is pretty useful, as Emacs seems to have more keybindings than I can
remember at any given point. For example press Ctrl+c or Ctrl+x in a buffer and
you will see the possible commands. [[https://github.com/justbur/emacs-which-key][Which key]] is nice for discoverability.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    (setq which-key-idle-delay 0.2)
    :config
    (which-key-mode 1))
#+end_src

** Helpful

#+begin_src emacs-lisp
  (message "Helpful")
#+end_src

[2022-03-15 An] Improves *help* buffer. Way more info than with regular help.
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind (:map ag/custom-bindings-map
                ("C-h f" . helpful-callable)
                ("C-h v" . helpful-variable)
                ("C-h k" . helpful-key)
                ("C-h k" . helpful-key)
                ("C-c C-d" . helpful-at-point)
                ("C-h F" . helpful-function)
                ("C-h C" . helpful-command)))
#+end_src

** Yasnippet

#+begin_src emacs-lisp
  (message "Yasnippet")
#+end_src

[2022-02-13 Sk] ”Yasnippet” - expand to a switch statement with placeholders.
Tab between the placeholders & type actual values. like in
this(https://www.youtube.com/watch?v=mflvdXKyA_g&list=PL-mFLc7R_MJdX0MxrqXEV4sM87hmVEkRw&index=3&t=67s&ab_channel=byuksel)
video. I am kind of too new to programming to be using snippets, but its nice,
keeping this plugin for now. It installs kind of many snippets… hope that
doesn’t slow emacs down. Shouldnt… You can also create your own snippet…
possibly even for .org files. many examples here -
https://notabug.org/arkhan/dots.old/src/master/emacs/.emacs.d/snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer t
    :hook ((prog-mode . yas-minor-mode)
           (text-mode . yas-minor-mode))
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets"))
#+end_src

To study the current snippets, use =M-x yas-describe-tables=, which will show a
table representation of all the snippets that =are available in the current
mode=.

Install the package, snippets will be in
=.emacs.d/elpa/yasnippet-snippets-20240105.1144/snippets=

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+end_src

** COMMENT Keycast

#+begin_src emacs-lisp
  (message "Keycast")
#+end_src

Shows the keys that you type in the modeline. Might be useful when presenting
emacs to someone.

#+begin_src emacs-lisp
  (use-package keycast
    :ensure t
    :config
    (setq keycast-mode-line-format "%2s%k%c%R")
    (setq keycast-mode-line-window-predicate 'mode-line-window-selected-p)
    (setq keycast-mode-line-remove-tail-elements nil)

    (dolist (input '(self-insert-command org-self-insert-command))
      (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

    (dolist (event '(mouse-event-p mouse-movement-p mwheel-scroll))
      (add-to-list 'keycast-substitute-alist `(,event nil))))

  ;; don't forget to turn it on whenever you need it
  ;; (keycast-mode-line-mode) or (keycast-mode)
#+end_src

** Undo-tree

#+begin_src emacs-lisp
  (message "Undo tree")
#+end_src

[2021-07-01]”Undo tree” lets me to return to the file stage before any
modifications were made. Keybind - C-x u.

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history nil))
#+end_src

** Save place

#+begin_src emacs-lisp
  (message "Save place")
#+end_src

[2021-07-01] “Saveplace” remembers your location in a file when saving files
#+begin_src emacs-lisp
  (use-package saveplace
    :ensure t
    :config
    ;; activate it for all buffers
    (setq-default save-place t)
    (save-place-mode 1))
#+end_src

** Goto-chg

#+begin_src emacs-lisp
  (message "Goto-chg")
#+end_src

Go to last/previous change [2022-02-24 Kt] Perfect! Can now cycle through the
last changes in the buffer. Very useful when doing some C-s in the buffer and
then want to come back to the last modified location. Great! If trying to use
it in org file - doesn’t work. Does ”org-cycle-agenda-files’ instead when doing
the reverse.

#+begin_src emacs-lisp
  (use-package goto-chg
    :ensure t
    :bind (:map ag/custom-bindings-map
                ("M-[" . 'goto-last-change)
                ("M-]" . 'goto-last-change-reverse)))
#+end_src

** COMMENT Impatient-mode

#+begin_src emacs-lisp
  (message "Impatient-mode")
#+end_src

[2024-05-30 Thu] Tried to use it to preview .org file, but it's kind of glichy.

Commands:

#+begin_quote
M-x httpd-start
M-x impatient-mode on the file's
M-x imp-set-current-filter, choose one from the below

Works fine with .md files, but not with .org
#+end_quote

Can use it to render .html pages live or .markdown files.

#+begin_src emacs-lisp
  (use-package impatient-mode
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (defun markdown-html (buffer)
    (princ (with-current-buffer buffer
      (format "<!DOCTYPE html><html><title>Impatient Markdown</title><xmp theme=\"united\" style=\"display:none;\"> %s  </xmp><script src=\"http://ndossougbe.github.io/strapdown/dist/strapdown.js\"></script></html>" (buffer-substring-no-properties (point-min) (point-max))))
    (current-buffer)))
#+end_src

#+begin_src emacs-lisp
   (defun markdown-filter (buffer)
     (princ
       (with-temp-buffer
         (let ((tmpname (buffer-name)))
           (set-buffer buffer)
           (set-buffer (markdown tmpname)) ; the function markdown is in `markdown-mode.el'
           (buffer-string)))
       (current-buffer)))
#+end_src

** COMMENT org-preview-html

#+begin_src emacs-lisp
  (message "org-preview-html")
#+end_src

https://github.com/jakebox/org-preview-html

Looks nice, can do .org file preview, but needs xwidget support in emacs. And
in nixos don't have the time to explore how to make it work now.

#+begin_src emacs-lisp
  (use-package org-preview-html
    :ensure t)
#+end_src

** ox-hugo

Decided to rebuild a wordpress site with hugo.

#+begin_src emacs-lisp
  (use-package ox-hugo
    :ensure t)
#+end_src


* Activate custom bindings map

#+begin_src emacs-lisp
  (message "Custom bindings map")
#+end_src

Lastly we need to activate the map by creating and activating the minor-mode.

#+begin_src emacs-lisp
  (define-minor-mode custom-bindings-mode
    "A mode that activates custom-bindings."
    :init-value t
    :keymap ag/custom-bindings-map)
#+end_src

* Notes about way to debug emacs

- Check if package has been loaded by ~(featurep 'magit)~
- use =esup= to see the load time of the packages
- use =use-package-report= to see the load time of each package
- write some messages (in the config) and see if they get printed =(message "hello")=
